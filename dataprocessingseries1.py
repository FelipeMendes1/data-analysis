# -*- coding: utf-8 -*-
"""dataprocessingseries1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NowLCnTzfVcFPaJwtoWKMJrnaB6sKhPH
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
df = pd.read_csv('DailyDelhiClimateTest.csv')

df

df.head()

df.tail()

df.columns

df.dtypes

df['date'] = pd.to_datetime(df['date'])

df.dtypes

df.set_index('date', inplace=True)

df

print(df.isnull().sum())

print(df.describe())

import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style="whitegrid")

plt.figure(figsize=(10, 6))
plt.plot(df.index, df['meantemp'],label='Average Temperature')
plt.title('Average Temperature Over Time')
plt.xlabel('Data')
plt.ylabel('Average temperature')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(df['humidity'],kde=True)
plt.title('Moisture Distribution')
plt.xlabel('Humidity')
plt.show()

print(df.corr())

plt.figure(figsize=(8,6))
sns.heatmap(df.corr(),annot = True, fmt='.2f', cmap ='coolwarm')
plt.title('Correlation heatmap')
plt.show()

from statsmodels.tsa.seasonal import seasonal_decompose

#checking the first 'humidity' time series
decompose_result_wekly = seasonal_decompose(df['meantemp'], model='additive', period=7)
decompose_result_month = seasonal_decompose(df['meantemp'], model = 'additive', period=30)


decompose_result = decompose_result_month
decompose_result.plot()

plt.show()

from statsmodels.tsa.stattools import adfuller

result = adfuller(df['meantemp'])

print('ADF Statistic: %f' % result[0])
print('p-value: %f' % result[1])
print('Critical Values:')
for key, value in result[4].items():
    print('\t%s: %.3f' % (key, value))

df

#checking the second 'wind_speed' time series
decompose_result = seasonal_decompose(df['wind_speed'], model='additive', period=30)
decompose_result.plot()
plt.show()

adf_result = adfuller(df['wind_speed'])
print('ADF Statistic: %f' % adf_result[0])
print('p-value: %f' % adf_result[1])

#checking the third 'humidity' time series

decompose_result_humidity = seasonal_decompose(df['humidity'], model='additive', period=30)
decompose_result_humidity.plot()
plt.show()

adf_result_humidity = adfuller(df['humidity'])
print('ADF Statistic for Humidity: %f' % adf_result_humidity[0])
print('p-value for Humidity: %f' % adf_result_humidity[1])

df

#dividing data into training and testing sets

train_size = int(len(df) * 0.7)

train_meantemp = df['meantemp'][:train_size]
test_meantemp = df['meantemp'][train_size:]

train_windspeed = df['wind_speed'][:train_size]
test_windspeed = df['wind_speed'][train_size:]

from statsmodels.tsa.statespace.sarimax import SARIMAX
import itertools

p = d = q = range(0,3)
pdq = list(itertools.product(p,d,q))
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in pdq]

for param in pdq:
    for param_seasonal in seasonal_pdq:
        try:
            mod = SARIMAX(train_meantemp,
                          order=param,
                          seasonal_order=param_seasonal,
                          enforce_stationarity=False,
                          enforce_invertibility=False)

            results = mod.fit()
            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))
        except:
            continue

from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import numpy as np

# Fit the model with the lowest AIC:
model = SARIMAX(train_meantemp, order=(0,0,2),seasonal_order=(0,2,2,12))
results = model.fit()

#Model diagnosis
results.plot_diagnostics(figsize=(15,12))
plt.show()

#Make predictions
pred = results.get_forecast(steps=len(test_meantemp))
pred_ci = pred.conf_int()
pred_mean = pred.predicted_mean


#Evaluate performance
rmse = np.sqrt(mean_squared_error(test_meantemp, pred_mean))
print(f'The RMSE of the predictions is: {rmse}')

#Compare predictions with actual values
ax = test_meantemp.plot(label='Observed', figsize=(14, 7))
pred_mean.plot(ax=ax, label='Forecast', alpha=.7)
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:,0],
                pred_ci.iloc[:,1], color='k', alpha=.2)
ax.set_xlabel('Date')
ax.set_ylabel('Average Temperature')
plt.legend()
plt.show()

from statsmodels.tsa.statespace.sarimax import SARIMAX

#we fit the model to the complete dataset (not just the training)
model = SARIMAX(df['meantemp'],
                order=(0,0,2),
                seasonal_order=(0,2,2,12),
                enforce_stationarity=False,
                enforce_invertibility=False)

results = model.fit()

#we define the number of steps forward we want to predict

#For example,to predict the next year if your data is monthly
n_steps = 12


#Future predictions
forecast = results.get_forecast(steps=n_steps)
predicted_mean = forecast.predicted_mean
conf_int = forecast.conf_int()

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 5))
plt.plot(df.index, df['meantemp'], label='Observed')
plt.plot(predicted_mean.index, predicted_mean, label='Forecast')
plt.fill_between(conf_int.index,
                 conf_int.iloc[:,0],
                 conf_int.iloc[:,1], color='pink', alpha=0.3)
plt.title('Average Temperature Forecast')
plt.xlabel('Date')
plt.ylabel('Average Temperature')
plt.ylim([min(df['meantemp']), max(df['meantemp'])]) # Set y scale based on data
plt.legend()
plt.show()

